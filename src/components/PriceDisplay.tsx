import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { CheckCircle, Download, Calendar, Mail } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import type { WebsiteType, AddOnService } from "./PricingCalculator";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface MaintenancePlan {
  id: string;
  name: string;
  price: number;
  features: string[];
}

interface PriceDisplayProps {
  selectedType: string;
  selectedAddOns: string[];
  selectedMaintenance: string;
  websiteTypes: WebsiteType[];
  addOnServices: AddOnService[];
  maintenancePlans: MaintenancePlan[];
  totalOneTimePrice: number;
  totalMonthlyPrice: number;
  formatPrice: (price: number) => string;
}

export const PriceDisplay = ({
  selectedType,
  selectedAddOns,
  selectedMaintenance,
  websiteTypes,
  addOnServices,
  maintenancePlans,
  totalOneTimePrice,
  totalMonthlyPrice,
  formatPrice,
}: PriceDisplayProps) => {
  const selectedWebsiteType = websiteTypes.find(type => type.id === selectedType);
  const selectedAddOnItems = selectedAddOns.map(id => 
    addOnServices.find(service => service.id === id)
  ).filter(Boolean) as AddOnService[];
  
  const selectedMaintenancePlan = maintenancePlans.find(plan => plan.id === selectedMaintenance);

  if (!selectedType) {
    return (
      <Card className="shadow-lg border-2">
        <CardHeader>
          <CardTitle className="text-center text-muted-foreground">
            Select a website type to see pricing
          </CardTitle>
        </CardHeader>
      </Card>
    );
  }

  const generatePDFQuote = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 15;
    let yPosition = 20;

    // Title
    doc.setFontSize(20);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(33, 37, 41);
    doc.text("WEBSITE DEVELOPMENT QUOTE", pageWidth / 2, yPosition, { align: "center" });
    
    yPosition += 15;

    // Company Info
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(108, 117, 125);
    doc.text("Generated by: Benson Michael Owen", margin, yPosition);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, pageWidth - margin, yPosition, { align: "right" });
    
    yPosition += 20;

    // Project Summary Table
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(33, 37, 41);
    doc.text("PROJECT SUMMARY", margin, yPosition);
    
    yPosition += 10;

    autoTable(doc, {
      startY: yPosition,
      head: [['Item', 'Description', 'Price']],
      body: [
        ['Website Type', selectedWebsiteType?.name || '', formatPrice(selectedWebsiteType?.basePrice || 0)],
        ['Maintenance Plan', selectedMaintenancePlan?.name || 'None', selectedMaintenancePlan ? formatPrice(selectedMaintenancePlan.price) + '/month' : ''],
      ],
      theme: 'grid',
      headStyles: {
        fillColor: [59, 130, 246],
        textColor: 255,
        fontStyle: 'bold'
      },
      styles: {
        fontSize: 10,
        cellPadding: 3,
      },
      margin: { left: margin, right: margin }
    });

    yPosition = (doc as any).lastAutoTable.finalY + 15;

    // Add-ons Table
    if (selectedAddOnItems.length > 0) {
      doc.setFontSize(14);
      doc.setFont("helvetica", "bold");
      doc.text("ADD-ON SERVICES", margin, yPosition);
      
      yPosition += 10;

      const addOnsBody = selectedAddOnItems.map(addOn => [
        addOn.name,
        addOn.monthlyFee ? 'One-time + Monthly' : 'One-time',
        addOn.monthlyFee 
          ? `${formatPrice(addOn.price)} + ${formatPrice(addOn.monthlyFee)}/month`
          : formatPrice(addOn.price)
      ]);

      autoTable(doc, {
        startY: yPosition,
        head: [['Service', 'Type', 'Price']],
        body: addOnsBody,
        theme: 'grid',
        headStyles: {
          fillColor: [139, 92, 246],
          textColor: 255,
          fontStyle: 'bold'
        },
        styles: {
          fontSize: 10,
          cellPadding: 3,
        },
        margin: { left: margin, right: margin }
      });

      yPosition = (doc as any).lastAutoTable.finalY + 15;
    }

    // Cost Summary Table
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("COST SUMMARY", margin, yPosition);
    
    yPosition += 10;

    autoTable(doc, {
      startY: yPosition,
      body: [
        ['One-Time Development Cost', formatPrice(totalOneTimePrice)],
        ['Monthly Maintenance Cost', formatPrice(totalMonthlyPrice) + '/month'],
        ['Initial Payment (50% Deposit)', formatPrice(totalOneTimePrice * 0.5)],
      ],
      theme: 'grid',
      headStyles: {
        fillColor: [34, 197, 94],
        textColor: 255,
        fontStyle: 'bold'
      },
      styles: {
        fontSize: 11,
        cellPadding: 4,
        fontStyle: 'bold'
      },
      margin: { left: margin, right: margin }
    });

    yPosition = (doc as any).lastAutoTable.finalY + 20;

    // Features Section
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("INCLUDED FEATURES", margin, yPosition);
    
    yPosition += 10;

    // Website Features
    doc.setFontSize(11);
    doc.setFont("helvetica", "bold");
    doc.text("Website Features:", margin, yPosition);
    yPosition += 6;
    
    doc.setFont("helvetica", "normal");
    selectedWebsiteType?.features.forEach(feature => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(`• ${feature}`, margin + 5, yPosition);
      yPosition += 6;
    });

    yPosition += 10;

    // Maintenance Features
    if (selectedMaintenancePlan) {
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFont("helvetica", "bold");
      doc.text("Maintenance Plan Features:", margin, yPosition);
      yPosition += 6;
      
      doc.setFont("helvetica", "normal");
      selectedMaintenancePlan.features.forEach(feature => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(`• ${feature}`, margin + 5, yPosition);
        yPosition += 6;
      });
    }

    yPosition += 15;

    // Payment Terms
    if (yPosition > 240) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("PAYMENT TERMS & CONDITIONS", margin, yPosition);
    
    yPosition += 10;
    
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    const paymentTerms = [
      "• 50% deposit required to start project development",
      "• 50% balance due upon project completion and delivery",
      "• Monthly maintenance fees billed in advance",
      "• 30-day support included with development package",
      "• Source code delivered on request",
      "• Custom requirements may affect final pricing",
      "• Quote valid for 30 days from generation date"
    ];

    paymentTerms.forEach(term => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(term, margin, yPosition);
      yPosition += 7;
    });

    yPosition += 15;

    // Contact Information
    if (yPosition > 220) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("CONTACT INFORMATION", margin, yPosition);
    
    yPosition += 10;
    
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text("Benson Michael Owen", margin, yPosition);
    doc.text("Phone: +234 902 731 5223", margin, yPosition + 7);
    doc.text("Email: bensonmichaelowen@gmail.com", margin, yPosition + 14);
    doc.text("Website: Available upon request", margin, yPosition + 21);

    // Footer
    const footerY = doc.internal.pageSize.getHeight() - 10;
    doc.setFontSize(8);
    doc.setTextColor(108, 117, 125);
    doc.text("Thank you for considering our services! We look forward to working with you.", 
             pageWidth / 2, footerY, { align: "center" });

    // Save the PDF
    const fileName = `website-quote-${selectedWebsiteType?.name?.replace(/\s+/g, '-').toLowerCase()}-${new Date().getTime()}.pdf`;
    doc.save(fileName);
  };

  const handleGenerateQuote = () => {
    const quoteData = {
      websiteType: selectedWebsiteType?.name,
      addOns: selectedAddOnItems.map(item => item.name),
      maintenancePlan: selectedMaintenancePlan?.name,
      oneTimeCost: totalOneTimePrice,
      monthlyCost: totalMonthlyPrice,
      timestamp: new Date().toISOString(),
    };
    
    console.log("Quote generated:", quoteData);
    generatePDFQuote();
  };

  return (
    <Card className="shadow-lg border-2 border-primary/20 sticky top-8">
      <CardHeader className="bg-gradient-to-r from-blue-50 to-purple-50">
        <div className="flex items-center justify-between">
          <CardTitle className="text-xl">Project Quote</CardTitle>
          <Badge variant="outline" className="bg-green-100 text-green-700 border-green-200">
            Live Quote
          </Badge>
        </div>
        <p className="text-sm text-muted-foreground">
          Real-time pricing based on your selection
        </p>
      </CardHeader>
      
      <CardContent className="space-y-6 pt-6">
        {/* Base Website Type */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-4 w-4 text-green-700" />
              <span className="font-semibold">{selectedWebsiteType?.name}</span>
            </div>
            <span className="font-bold text-primary">
              {formatPrice(selectedWebsiteType?.basePrice || 0)}
            </span>
          </div>
          <div className="text-sm text-muted-foreground ml-6 space-y-1">
            <p>{selectedWebsiteType?.description}</p>
            <p className="text-xs">Delivery: {selectedWebsiteType?.deliveryTime}</p>
            <p className="text-xs">Includes: {selectedWebsiteType?.features.slice(0, 2).join(', ')}...</p>
          </div>
        </div>

        {/* Add-on Services */}
        {selectedAddOnItems.length > 0 && (
          <>
            <Separator />
            <div className="space-y-3">
              <h4 className="font-semibold text-sm text-muted-foreground uppercase tracking-wide">
                Add-on Services
              </h4>
              {selectedAddOnItems.map((addOn) => (
                <div key={addOn.id} className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="h-4 w-4 text-blue-500" />
                    <div>
                      <span className="text-sm font-medium">{addOn.name}</span>
                      {addOn.monthlyFee && (
                        <span className="text-xs text-muted-foreground block">
                          + {formatPrice(addOn.monthlyFee)}/month
                        </span>
                      )}
                    </div>
                  </div>
                  <span className="text-sm font-semibold text-primary">
                    +{formatPrice(addOn.price)}
                  </span>
                </div>
              ))}
            </div>
          </>
        )}

        {/* Maintenance Plan */}
        {selectedMaintenancePlan && (
          <>
            <Separator />
            <div className="space-y-3">
              <h4 className="font-semibold text-sm text-muted-foreground uppercase tracking-wide">
                Maintenance Plan
              </h4>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-4 w-4 text-purple-500" />
                  <div>
                    <span className="text-sm font-medium">{selectedMaintenancePlan.name}</span>
                    <span className="text-xs text-muted-foreground block">
                      Monthly subscription
                    </span>
                  </div>
                </div>
                <span className="text-sm font-semibold text-primary">
                  {formatPrice(selectedMaintenancePlan.price)}/month
                </span>
              </div>
            </div>
          </>
        )}

        <Separator />

        {/* Price Summary */}
        <div className="space-y-4 bg-slate-50 rounded-lg p-4">
          <div className="flex items-center justify-between text-lg font-bold">
            <span>One-Time Development</span>
            <span className="text-primary">
              {formatPrice(totalOneTimePrice)}
            </span>
          </div>
          
          <div className="flex items-center justify-between text-lg font-bold border-t pt-2">
            <span>Monthly Maintenance</span>
            <span className="text-green-700">
              {formatPrice(totalMonthlyPrice)}/month
            </span>
          </div>

          {/* Payment Terms */}
          <div className="text-xs text-muted-foreground space-y-2 pt-2">
            <div className="bg-white p-2 rounded border">
              <p className="font-semibold text-foreground">Payment Structure:</p>
              <p>• 50% deposit to start project</p>
              <p>• 50% upon completion</p>
              <p>• Monthly billing for maintenance</p>
            </div>
            <p>• 30-day support included with development</p>
            <p>• Source code delivered on request</p>
            <p>• Custom requirements may affect final pricing</p>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="space-y-3 pt-4">
          <Button 
            onClick={handleGenerateQuote}
            className="w-full bg-gradient-primary hover:from-blue-700 hover:to-purple-700 text-white transition-all"
            size="lg"
          >
            <Download className="h-4 w-4 mr-2" />
            Download PDF Quote
          </Button>

          <a href="https://calendly.com/bensonmichaelowen/30min" className="block" target="_blank" rel="noopener noreferrer">
            <Button variant="outline" className="w-full" size="lg">
              <Calendar className="h-4 w-4 mr-2" />
              Schedule Consultation
            </Button>
          </a>

          <a href="mailto:bensonmichaelowen@gmail.com?subject=Website Development Quote Inquiry" className="block">
            <Button variant="ghost" className="w-full" size="sm">
              <Mail className="h-4 w-4 mr-2" />
              Email for Custom Quote
            </Button>
          </a>
        </div>

        {/* Contact Info */}
        <div className="text-center pt-4 border-t">
          <p className="text-sm text-muted-foreground mb-2">
            Need customization? We offer flexible payment plans!
          </p>
          <div className="space-y-1 text-xs">
            <p className="font-medium text-foreground">📞 +234 902 731 5223</p>
            <p className="text-primary font-semibold">✉️ bensonmichaelowen@gmail.com</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};